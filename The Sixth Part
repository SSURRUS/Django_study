
除了服务端生成的HTML以外，网络通常需要一些额外的软件--比如图片、脚本和样式表--来帮助渲染网络页面。
在Django中，我们把这些文件统称为“静态文件”。

django.contrib.staticfiles:将各个应用的静态文件（和一些你指明的目录里的文件）统一收集起来。这样一
来，在生产环境中，这些文件就会集中在一个便于分发的地方。

#自定义应用的界面和风格
首先，在polls目录下创建一个名为static的目录。Django将在该目录下查找静态文件，这种方式和Django在
polls/templates/目录下查找template的方式类似

Django的STATICFILES_FINDERS设置包含一系列的查找器，他们知道去哪里找到static文件。AppDirectoriesFinder
是默认查找器中的一个，它会在每个INSTALLED_APPS中指定的应用的子文件中寻找名为static的特定文件夹，就像刚刚
在polls刚创建的那个一样。管理后台采用相同的目录结构管理他的静态文件。

在刚创建的static文件夹中创建一个名为polls的文件夹，再在polls文件夹中创建一个名为style.css的文件。换句话说，
样式表的路径应该是polls/static/polls/style.css。因为AppDirectoriesFinder的存在，可以在Django中以polls/
style.css的形式引用此文件，类似你引用模板路径的方式。

将以下代码放入样式表(polls/static/polls/style.css)：
'''
li a {
    color: green;
}
'''

下一步，在 polls/templates/polls/index.html 的文件头添加以下内容：
'''
{% load static %}

<link rel="stylesheet" href="{% static 'polls/style.css' %}">
'''
{% static %}模板标签会生成静态文件的绝对路径

重新启动服务器
'''
$python manage.py runserver
'''
重新载入 http://localhost:8000/polls/ ，你会发现有问题的链接是绿色的 （这是 Django 自己的问题标注方式），这意味
着你追加的样式表起作用了

#添加一个背景图
我们将为图像创建一个子目录。 在 polls/static/polls/ 目录中创建 images 子目录。 在此目录中，添加您想用作背景的任
何图像文件。 出于本的目的使用了一个名为“background.png”的文件，它的完整路径为“polls/static/polls/
images/background.png”。
然后，在样式表中添加对图像的引用（polls/static/polls/style.css）
'''
body {
    background: white url("images/background.png") no-repeat;
}
'''
浏览器重载 http://localhost:8000/polls/，将在屏幕的左上角见到这张背景图。
