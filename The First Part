第一章节由两部分组成
一个让人们查看和投票的公共站点
一个能你能添加/修改和删除投票的管理站点

命令提示符窗口输入如下代码可查询Django的版本符号
'''
$ python -m django --version
'''
如果这行命令只输出了一个版本号，证明安装了此版本的Django
没有安装的话会提示一个'No moudule named django'

#创建项目
第一次使用Django的话，需要初始化设置。需要用一些自动生成的代码配置一个Django project--即一个Django项目
实例需要的的设置项集合，包括数据库配置、Django配置和应用程序配置

打开命令行，cd到一个你想放置你代码的目录，然后运行如下命令：
'''
$ django-admin startproject mysite
'''
这行代码会在当前目录下创建一个mysite目录。
避免使用 Python 或 Django 的内部保留字来命名你的项目。
具体地说，你得避免使用像 django (会和 Django 自己产生冲突)或 test (会和 Python 的内置组件产生冲突)这样的名字

这边可以查看startproject创建了一些什么：
mysite/
     manage.py
     mysite/
         __init__.py
         settings.py
         urls.py
         asgi.py
         wsgi.py
对这些目录和文件进行刨析
mysite/  根目录只是项目的容器，根目录名称对项目没有任何影响
manage.py:一个让你用各种方式管理Django项目的命令行工具。
里面一层的mysite/目录包含你的项目，这是一个纯python包。它的名字就是当你引用它内部任何东西需要用到的python包名
mysite/__init__.py:一个空文件，告诉python这个目录应该被认为是一个Python包
mysite/settings.py:Django项目的配置文件
mysite/urls.py:Django项目的URL声明，类似于网站的目录
mysite/asgi.py：作为项目的运行在ASGI兼容的Web服务器上的入口
mysite/wsgi.py: 作为项目的运行在WSGI兼容的Web服务器上的入口

用于开发的简易服务器
确认一下Django项目是否创建成功
'''
$ python manage.py runserver
'''
会看到如下的输出
'''
Performing system checks...

System check identified no issues (0 silenced).

You have unapplied migrations; your app may not work properly until they are applied.
Run 'python manage.py migrate' to apply them.

八月 06, 2024 - 15:50:53
Django version 5.0, using settings 'mysite.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.

'''
服务器现在正在运行，通过浏览器访问 http://127.0.0.1:8000/ 。将看到一个“祝贺”页面，有一只火箭正在发射。就是成功了！
此时启动了Django开发服务器，这是一个纯python编写的轻量级网络服务器 。在Django中包含了这个服务器，所以可以快速进行开发
，而不需要处理配置生产服务器的问题--比如Apache--直到你准备好用于生产

不要将这个服务器用于和生产环境相关的任何地方。这个服务器只是为了开发而设置的

#创建投票应用
在Django中，每一个应用都是一个python包，并且遵循相同的约定.Django自带一个道具，可以帮你生成应用的基础目录结构
应用可以存放在任何Python路径中定义的路径。在manage.py同级目录中创建投票应用，这样可以作为顶级模块导入，而不是mysite的子模块

确定现在处于manage.py所在的目录下，运行这命令来创建一个应用:
'''
$ python manage.py startapp polls
'''
这将创建一个名为polls的目录，其布局如下：
'''
polls/
    __init__.py
admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py
'''
这个目录包含了投票应用的所有内容

#编写第一个视图
在polls/views.py中进行编写
'''
from django.http import HttpResponse

def index(request):
    return HttpResponse("You are at the poll index")
'''
这个是Django中的最基本的视图。想在浏览器中访问它，我们需要将其映射到一个URL，为此我们需要定义一个URL配置，
简称“URLconf”。这些URL配置在每个Django应用中定义，并且是名为url.py的python文件。

要为polls应用定义URLconf，请创建一个名为polls/urls.py的文件
'''
from django.urls import path
from . import views

urlpatterns = [
    path('views.index', name="index"),
]
'''
应用文件应该如下所示
'''
polls/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    urls.py
    views.py
'''
下一步是在mysite项目的全局URLconf中配置，以包含polls.urls中定义的URLconf。
为此，在mysite/urls.py中添加django.urls.include的导入，并在urlspatterns列表中插入
include()
'''
from django.contrib import admin
from django.urls import include,path

urlpatterns = [
    path('polls/', include("polls.urls")),
    path('admin/',admin.site.urls),
]
'''
函数include()允许引用其他的URLconfs。当Django遇到include()时，他会截断与此项匹配的URL的部分，并将剩余
的字符串发送到URLconf以供进一步的处理。
设置include()的理念是使其可以即插即用。因为投票应用有它自己的URLconf(polls/urls.py),他们能够被放在"/polls/",
"/fun_polls/","/content/polls/",或者在其他路径下，这个应用都能正常工作

把index视图加入URLconf，验证其是否能够正常工作：
'''
$python manage.py runserver
'''
用你的浏览器访问 http://localhost:8000/polls/，你应该能够看见 " You are at the polls index." ，这是你在 index 视图中定义的。

函数path()具有四个参数，两个必须参数：route和view，两个可选参数：kwargs和name

route:匹配URL的准则（类似于正则表达式）.当Django响应一个请求的时候，它会从urlpatterns的第一项开始，按顺序依次匹配列表中的选项，直到
找到匹配的项 这些准则不会匹配到GET和POST参数或域名
例如，URLconf 在处理请求 https://www.example.com/myapp/ 时，它会尝试匹配 myapp/ 。处理请求 https://www.example.com/myapp/?page=3 时，也只会尝试匹配 myapp/

view:当Django找到一个匹配的准则，就会调用这个特定的视图函数，并传入一个HttpRequest对象作为第一个参数，被“捕获”的参数以关键字参数的形式传入。

kwargs：任意个关键字参数可以作为一个字典传递给目标函数视图

name:为URL取名使之能够在Django的任意位置唯一的被引用
允许你只改一个文件就能全局地修改某个URL模式

